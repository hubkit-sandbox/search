name: CI
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
env:
    ES_HTTP_PORT: '59200'
    ELASTICSEARCH_HOST: 'localhost'
    ELASTICSEARCH_PORT: '59200'
    DB_HOST: 127.0.0.1

jobs:

    cs-fixer:
        name: 'PHP CS Fixer'

        runs-on: 'ubuntu-latest'

        strategy:
            matrix:
                php-version:
                    - '8.2'

        steps:
            -
                name: 'Check out'
                uses: 'actions/checkout@v4'

            -
                name: 'Set up PHP'
                uses: 'shivammathur/setup-php@v2'
                with:
                    php-version: '${{ matrix.php-version }}'
                    coverage: 'none'

            -
                name: 'Get Composer cache directory'
                id: 'composer-cache'
                run: 'echo "cache_dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT'

            -
                name: 'Cache dependencies'
                uses: 'actions/cache@v4'
                with:
                    path: '${{ steps.composer-cache.outputs.cache_dir }}'
                    key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
                    restore-keys: 'php-${{ matrix.php-version }}-composer-locked-'

            -
                name: 'Install dependencies'
                run: 'composer install --no-progress'

            -
                name: 'Check the code style'
                run: 'make cs'

    phpstan:
        name: 'PhpStan'

        runs-on: 'ubuntu-latest'

        strategy:
            matrix:
                php-version:
                    - '8.2'

        steps:
            -
                name: 'Check out'
                uses: 'actions/checkout@v4'

            -
                name: 'Set up PHP'
                uses: 'shivammathur/setup-php@v2'
                with:
                    php-version: '${{ matrix.php-version }}'
                    coverage: 'none'

            -
                name: 'Get Composer cache directory'
                id: 'composer-cache'
                run: 'echo "cache_dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT'

            -
                name: 'Cache dependencies'
                uses: 'actions/cache@v4'
                with:
                    path: '${{ steps.composer-cache.outputs.cache_dir }}'
                    key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
                    restore-keys: 'php-${{ matrix.php-version }}-composer-locked-'

            -
                name: 'Install dependencies'
                run: 'composer install --no-progress'

            -
                name: 'Run PhpStan'
                run: 'vendor/bin/phpstan analyze --no-progress --error-format=github'

    test:

        name: 'PHPUnit with PHP ${{ matrix.php-version }} / Symfony ${{ matrix.symfony-version }}'
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                include:
                    -
                        php-version: '8.1'
                        composer-options: '--prefer-stable'
                        symfony-version: '^6.4'
                    -
                        php-version: '8.2'
                        composer-options: '--prefer-stable'
                        symfony-version: '^6.4'

                    -
                        php-version: '8.2'
                        composer-options: '--prefer-stable'
                        symfony-version: '^7.0'

                    -
                        php-version: '8.3'
                        composer-options: '--prefer-stable'
                        symfony-version: '^7.0'

        services:
            # https://docs.docker.com/samples/library/postgres/
            postgres:
                image: postgres:9.6
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: search_tests
                ports:
                    - "5432:5432"
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

            # https://docs.docker.com/samples/library/mysql/
            mariadb-server:
                image: mariadb:10.3
                env:
                    MYSQL_DATABASE: search_tests
                    MYSQL_ROOT_PASSWORD: nope
                ports:
                    - "3306:3306"
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

            # https://hub.docker.com/_/elasticsearch/
            elasticsearch:
                image: elasticsearch:7.3.0
                ports:
                    - "59200:9200"
                options: -e="discovery.type=single-node" -e="xpack.security.enabled=false" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

        steps:
            -
                name: Check the Elasticsearch connection from runner host
                run: |
                    curl -fsSL "http://localhost:$ES_HTTP_PORT"
                    curl -fsSL "http://localhost:$ES_HTTP_PORT/_cluster/health?pretty"

            -
                name: Checkout
                uses: actions/checkout@v4

            -
                name: 'Set up PHP'
                uses: 'shivammathur/setup-php@v2'
                with:
                    php-version: '${{ matrix.php-version }}'
                    extensions: mbstring, xml, ctype, iconv, intl, bcmath, pdo_sqlite, dom, filter, json, pgsql, pdo, pdo_pgsql, pdo_mysql
                    coverage: 'xdebug'
                env:
                    update: true

            -
                name: 'Get Composer cache directory'
                id: 'composer-cache'
                run: 'echo "cache_dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT'

            -
                name: 'Cache dependencies'
                uses: 'actions/cache@v4'
                with:
                    path: '${{ steps.composer-cache.outputs.cache_dir }}'
                    key: "php-${{ matrix.php-version }}-composer-locked-${{ hashFiles('composer.lock') }}"
                    restore-keys: 'php-${{ matrix.php-version }}-composer-locked-'

            -
                name: 'Install dependencies'
                env:
                    COMPOSER_OPTIONS: '${{ matrix.composer-options }}'
                    SYMFONY_REQUIRE: '${{ matrix.symfony-version }}'
                run: |
                    rm -f composer.lock
                    composer global config --no-plugins allow-plugins.symfony/flex true
                    composer global require --no-progress --no-scripts --no-plugins symfony/flex
                    composer update --no-progress --no-interaction --optimize-autoloader $COMPOSER_OPTIONS

            -
                name: Run Tests
                env:
                    SYMFONY_DEPRECATIONS_HELPER: weak
                run: |
                    vendor/bin/phpunit --verbose --configuration phpunit.xml.dist
                    vendor/bin/phpunit --verbose --configuration phpunit/pgsql.xml
                    vendor/bin/phpunit --verbose --configuration phpunit/mysql.xml
